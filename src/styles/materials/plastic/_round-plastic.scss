/******************************************************************************\
|                                                                              |
|                             _round-plastic.scss                              |
|                                                                              |
|******************************************************************************|
|                                                                              |
|        This defines the dom and svg visual styles for this application.      |
|                                                                              |
|        Author(s): Abe Megahed                                                |
|                                                                              |
|        This file is subject to the terms and conditions defined in           |
|        'LICENSE.txt', which is part of this source code distribution.        |
|                                                                              |
|******************************************************************************|
|        Copyright (C) 2016-2023, Megahed Labs LLC, www.sharedigm.com          |
\******************************************************************************/

@use "../../colors/colors";
@use "../lighting";

//
// variables
//

$highlight-size: 25%;
$highlight-strength: 100%;
$highlight-width: 25%;
$highlight-height: 12%;
$highlight-hoffset: 50%;
$highlight-voffset: 10%;

$specular-size: 50%;
$specular-strength: 50%;
$specular-width: 50%;
$specular-height: 25%;
$specular-hoffset: 50%;
$specular-voffset: 10%;

//
// mixins
//

@mixin shade($color: white, $border-style: outset) {
	background:

		// highlight
		//
		radial-gradient(ellipse $highlight-width $highlight-height at $highlight-hoffset $highlight-voffset,
			colors.fade(white, $highlight_strength) $highlight-size,
			transparent 100%) no-repeat,

		// specular
		//
		radial-gradient(ellipse $specular-width $specular-height at $specular-hoffset $specular-voffset,
			colors.fade(white, $specular-strength) 0%,
			colors.fade(white, $specular-strength) $specular-size,
			transparent 100%) no-repeat,

		// diffuse
		//
		linear-gradient(var(--light-direction),
			colors.fade(white, 10%) 0%,
			transparent 50%,
			colors.fade(black, 10%) 100%) no-repeat;

	// ambient
	//
	background-color: $color;

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lighten($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darken($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

@mixin multilayer-shade($color: white, $border-style: outset) {
	background:

		// diffuse
		//
		linear-gradient(var(--light-direction),
			colors.fade(white, 10%) 0%,
			transparent 50%,
			colors.fade(black, 10%) 100%) no-repeat;

	// ambient
	//
	background-color: $color;

	// overlay layer
	//
	position: relative;
	overflow: hidden;
	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;

		background:

			// highlight
			//
			radial-gradient(ellipse $highlight-width $highlight-height at $highlight-hoffset $highlight-voffset,
				white $highlight-size,
				transparent 100%) no-repeat,

			// specular
			//
			radial-gradient(ellipse $specular-width $specular-height at $specular-hoffset $specular-voffset,
				colors.fade(white, $specular-strength) 0%,
				colors.fade(white, $specular-strength) $specular-size,
				transparent 100%) no-repeat,
	}

	// highlight angle
	//
	&:not(.long):after {
		transform: scale(-1) rotate(var(--light-direction));
		border-radius: 50%;
	}

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lighten($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darken($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

//
// color mixins
//

@mixin shaded($color: white, $border-style: outset) {
	background:

		// highlight
		//
		radial-gradient(ellipse $highlight-width $highlight-height at $highlight-hoffset $highlight-voffset,
			colors.faded(white, $highlight_strength) $highlight-size,
			transparent 100%) no-repeat,

		// specular
		//
		radial-gradient(ellipse $specular-width $specular-height at $specular-hoffset $specular-voffset,
			colors.faded(white, $specular-strength) 0%,
			colors.faded(white, $specular-strength) $specular-size,
			transparent 100%) no-repeat,

		// diffuse
		//
		linear-gradient(var(--light-direction),
			colors.faded(white, 10%) 0%,
			transparent 50%,
			colors.faded(black, 10%) 100%) no-repeat;

	// ambient
	//
	background-color: $color;

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lightened($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darkened($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

@mixin multilayer-shaded($color: white, $border-style: outset) {
	background:

		// diffuse
		//
		linear-gradient(var(--light-direction),
			colors.faded(white, 10%) 0%,
			transparent 50%,
			colors.faded(black, 10%) 100%) no-repeat;

	// ambient
	//
	background-color: $color;

	// overlay layer
	//
	position: relative;
	overflow: hidden;
	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;

		background:

			// highlight
			//
			radial-gradient(ellipse $highlight-width $highlight-height at $highlight-hoffset $highlight-voffset,
				white $highlight-size,
				transparent 100%) no-repeat,

			// specular
			//
			radial-gradient(ellipse $specular-width $specular-height at $specular-hoffset $specular-voffset,
				colors.faded(white, $specular-strength) 0%,
				colors.faded(white, $specular-strength) $specular-size,
				transparent 100%) no-repeat,
	}

	// highlight angle
	//
	&:not(.long):after {
		transform: scale(-1) rotate(var(--light-direction));
		border-radius: 50%;
	}

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lightened($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darkened($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}