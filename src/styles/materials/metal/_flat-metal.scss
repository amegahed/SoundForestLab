/******************************************************************************\
|                                                                              |
|                               _flat-metal.scss                               |
|                                                                              |
|******************************************************************************|
|                                                                              |
|        This defines the dom and svg visual styles for this application.      |
|                                                                              |
|        Author(s): Abe Megahed                                                |
|                                                                              |
|        This file is subject to the terms and conditions defined in           |
|        'LICENSE.txt', which is part of this source code distribution.        |
|                                                                              |
|******************************************************************************|
|        Copyright (C) 2016-2023, Megahed Labs LLC, www.sharedigm.com          |
\******************************************************************************/

@use "../../colors/colors";
@use "../lighting";

//
// variables
//

$highlight-strength: 100%;
$highlight-size: 50%;

$specular-strength: 100%;
$specular-size: 75%;

//
// mixins
//

@mixin shade($color: white, $border-style: outset) {
	background:

		// highlight
		//
		linear-gradient(var(--light-direction),
			colors.fade(lighting.lighten($color, 30%), $highlight-strength) 0%,
			transparent 3px) no-repeat,

		// specular
		//
		linear-gradient(var(--light-direction),
			colors.fade(lighting.lighten($color, 30%), $specular-strength) 0%,
			transparent 20%) no-repeat,

		// reflected
		//
		linear-gradient(to right,
			transparent 0%,
			colors.fade($color, 50%) 50%,
			transparent 100%),
		linear-gradient(to bottom,
			$color 0%,
			lighting.darken($color, 50%) 10%,
			lighting.lighten($color, 20%) 100%);

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lighten($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darken($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

@mixin multilayer-shade($color: white, $border-style: outset) {
	background:

		// reflected
		//
		linear-gradient(var(--light-direction),
			transparent 0%,
			colors.fade($color, 50%) 66%,
			$color 100%) no-repeat,

		// diffuse
		//
		lighting.darken($color, 50%);

	position: relative;
	overflow: hidden;

	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;
		// mix-blend-mode: overlay;

		background:

			// highlight
			//
			linear-gradient(var(--light-direction),
				lighting.lighten($color, 30%) 0%,
				transparent 10%) 100% no-repeat,

			// specular
			//
			linear-gradient(var(--light-direction),
				lighting.lighten($color, 30%) 0%,
				transparnt 20%) no-repeat;
	}

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lighten($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darken($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

//
// color mixins
//

@mixin shaded($color: white, $border-style: outset) {
	background:

		// highlight
		//
		linear-gradient(var(--light-direction),
			colors.faded(lighting.lightened($color, 30%), $highlight-strength) 0%,
			colors.faded($color, 0%) 3px) no-repeat,

		// specular
		//
		linear-gradient(var(--light-direction),
			colors.faded(lighting.lightened($color, 30%), $specular-strength) 0%,
			colors.faded($color, 0%) 20%) no-repeat,

		// reflected
		//
		linear-gradient(to right,
			colors.faded($color, 0%) 0%,
			colors.faded($color, 50%) 50%,
			colors.faded($color, 0%) 100%),
		linear-gradient(to bottom,
			$color 0%,
			lighting.darkened($color, 50%) 10%,
			lighting.lightened($color, 20%) 100%);

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lightened($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darkened($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

@mixin multilayer-shaded($color: white, $border-style: outset) {
	background:

		// reflected
		//
		linear-gradient(var(--light-direction),
			transparent 0%,
			colors.faded($color, 50%) 66%,
			$color 100%) no-repeat,

		// diffuse
		//
		lighting.darkened($color, 50%);

	position: relative;
	overflow: hidden;

	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;
		// mix-blend-mode: overlay;

		background:

			// highlight
			//
			linear-gradient(var(--light-direction),
				lighting.lightened($color, 30%) 0%,
				transparent 10%) 100% no-repeat,

			// specular
			//
			linear-gradient(var(--light-direction),
				lighting.lightened($color, 30%) 0%,
				transparnt 20%) no-repeat;
	}

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lightened($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darkened($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}