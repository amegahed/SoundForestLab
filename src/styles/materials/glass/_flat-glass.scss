/******************************************************************************\
|                                                                              |
|                               _flat-glass.scss                               |
|                                                                              |
|******************************************************************************|
|                                                                              |
|        This defines the dom and svg visual styles for this application.      |
|                                                                              |
|        Author(s): Abe Megahed                                                |
|                                                                              |
|        This file is subject to the terms and conditions defined in           |
|        'LICENSE.txt', which is part of this source code distribution.        |
|                                                                              |
|******************************************************************************|
|        Copyright (C) 2016-2023, Megahed Labs LLC, www.sharedigm.com          |
\******************************************************************************/

@use "../../colors/colors";
@use "../lighting";

//
// variables
//

$opacity: 80%;

$highlight-strength: 100%;
$highlight-size: 10%;

$specular-strength: 25%;
$specular-size: 25%;

$reflected-strength: 100%;
$reflected-size: 50%;

//
// mixins
//

@mixin shade($color: white, $border-style: outset, $opacity: $opacity) {
	background:

		// highlight
		//
		linear-gradient(var(--light-direction),
			colors.fade(white, $highlight-strength) 0%,
			transparent $highlight-size) no-repeat,

		// specular
		//
		linear-gradient(var(--light-direction),
			colors.fade(white, $specular-strength) 0%,
			transparent $specular-size) no-repeat,

		// reflected
		//
		linear-gradient(var(--light-direction),
			transparent $reflected-size,
			colors.fade(lighting.lighten($color, 10%), $reflected-strength) 100%) no-repeat;

	// transmitted
	//
	background-color: colors.fade(lighting.darken($color, 20%), $opacity);

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lighten($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darken($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

@mixin multilayer-shade($color: white, $border-style: outset, $opacity: 100%) {
	position: relative;
	overflow: hidden;

	background:

		// reflected
		//
		linear-gradient(var(--light-direction),
			transparent 50%,
			lighting.lighten($color, 10%) 100%) no-repeat;

	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;

		background:

			// highlight
			//
			linear-gradient(var(--light-direction),
				colors.fade(white, $highlight-strength) 0%,
				transparent 3px) no-repeat,

			// specular
			//
			linear-gradient(var(--light-direction),
				colors.fade(white, $specular-strength) 0%,
				transparent 20%) no-repeat;
	}

	// transmitted
	//
	background-color: colors.fade(lighting.darken($color, 20%), $opacity);

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lighten($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darken($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

//
// color mixins
//

@mixin shaded($color: white, $border-style: outset, $opacity: $opacity) {
	background:

		// highlight
		//
		linear-gradient(var(--light-direction),
			colors.faded(white, $highlight-strength) 0%,
			transparent $highlight-size) no-repeat,

		// specular
		//
		linear-gradient(var(--light-direction),
			colors.faded(white, $specular-strength) 0%,
			transparent $specular-size) no-repeat,

		// reflected
		//
		linear-gradient(var(--light-direction),
			transparent $reflected-size,
			colors.faded(lighting.lightened($color, 10%), $reflected-strength) 100%) no-repeat;

	// transmitted
	//
	background-color: colors.faded(lighting.darkened($color, 20%), $opacity);

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lightened($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darkened($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}

@mixin multilayer-shaded($color: white, $border-style: outset, $opacity: 100%) {
	position: relative;
	overflow: hidden;

	background:

		// reflected
		//
		linear-gradient(var(--light-direction),
			colors.faded($color, 0%) 50%,
			lighting.lightened($color, 10%) 100%) no-repeat;

	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;

		background:

			// highlight
			//
			linear-gradient(var(--light-direction),
				colors.faded(white, $highlight-strength) 0%,
				transparent 3px) no-repeat,

			// specular
			//
			linear-gradient(var(--light-direction),
				colors.faded(white, $specular-strength) 0%,
				transparent 20%) no-repeat;
	}

	// transmitted
	//
	background-color: colors.faded(lighting.darkened($color, 20%), $opacity);

	// borders
	//
	@if ($border-style == inset) {
		border-color: lighting.lightened($color, 10%);
	} @else if ($border-style == outset) {
		border-color: lighting.darkened($color, 10%);
	} @else if ($border-style != none) {
		border-color: $color;
	}
}